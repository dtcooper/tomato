name: Build and push
description: Build and push docker containers

inputs:
  container:
    description: Container name
    required: true
  tag:
    description: Container tag name
    required: true
  context:
    description: Container context
    required: false
    default: ''
  token:
    description: GitHub token
    required: true
  no-cache:
    description: Do not use cache when building
    required: false
    default: 'false'
  build-args:
    description: List of build-time variables
    required: false
  platforms:
    description: Container build platforms
    required: false
    default: 'linux/amd64,linux/arm64'
  push:
    description: Push container upstream
    required: false
    default: 'true'

runs:
  using: composite
  steps:
    -
      name: Set variables
      id: vars
      shell: bash
      run: |
        USERNAME="$(echo "$GITHUB_REPOSITORY_OWNER" | tr '[:upper:]' '[:lower:]')"
        CACHE_CONTAINER=ghcr.io/${USERNAME}/tomato-build-cache
        CACHE_TAG="${CACHE_CONTAINER}:${{ inputs.container }}-${{ inputs.tag }}"
        echo "CACHE_TAG=${CACHE_TAG}" | tee -a "${GITHUB_ENV}"
        echo "REPO=ghcr.io/${USERNAME}/tomato-${{ inputs.container }}" | tee -a "${GITHUB_ENV}"
        echo "USERNAME=${USERNAME}" | tee -a "${GITHUB_ENV}"
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    -
      name: Login to Github Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ env.USERNAME }}
        password: ${{ inputs.token }}
    -
      name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: ${{ inputs.push  == 'true' && 'true' || 'false'}}
        pull: true
        platforms: ${{ inputs.platforms }}
        context: ./${{ inputs.container }}/
        tags: ${{ env.REPO }}:${{ inputs.tag }}
        build-args: ${{ inputs.build-args }}
        cache-from: ${{ inputs.no-cache == 'false' && inputs.push  == 'true' && format('type=registry,ref={0}', env.CACHE_TAG) || '' }}
        cache-to: ${{ inputs.no-cache == 'false' && inputs.push  == 'true' && format('type=registry,ref={0},mode=max', env.CACHE_TAG) || '' }}
