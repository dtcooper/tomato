{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Tomato \u2190 Welcome to Tomato Radio Automation! Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio . Use Case \u2190 Features \u2190 Why The Name? \u2190 Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin. Tomato with his favorite mug. What's Next? \u2190","title":"Intro"},{"location":"#welcome-to-tomato","text":"Welcome to Tomato Radio Automation! Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio .","title":"Welcome to Tomato"},{"location":"#use-case","text":"","title":"Use Case"},{"location":"#features","text":"","title":"Features"},{"location":"#why-the-name","text":"Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin. Tomato with his favorite mug.","title":"Why The Name?"},{"location":"#whats-next","text":"","title":"What's Next?"},{"location":"client/","text":"The Tomato Desktop Client \u2190 Currently the desktop client has not been written. Head over to the backend server docs to get started!","title":"Client"},{"location":"client/#the-tomato-desktop-client","text":"Currently the desktop client has not been written. Head over to the backend server docs to get started!","title":"The Tomato Desktop Client"},{"location":"license/","text":"Author & License \u2190 Author \u2190 Hi, I'm David Cooper, the author of Tomato., reachable at david.cooper@burningman.org . License \u2190 Tomato Radio Automation is offered under the permissive MIT license below, MIT License Copyright (c) 2019-2022, David Cooper <david.cooper@burningman.org> Copyright (c) 2019-2022, Burning Man Information Radio (https://bmir.org/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Author & License"},{"location":"license/#author-license","text":"","title":"Author &amp; License"},{"location":"license/#author","text":"Hi, I'm David Cooper, the author of Tomato., reachable at david.cooper@burningman.org .","title":"Author"},{"location":"license/#license","text":"Tomato Radio Automation is offered under the permissive MIT license below, MIT License Copyright (c) 2019-2022, David Cooper <david.cooper@burningman.org> Copyright (c) 2019-2022, Burning Man Information Radio (https://bmir.org/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"server/","text":"The Tomato Backend Server \u2190 The backend server is written in Python 's Django web framework , heavily leveraging its automatic admin interface . Installation \u2190 Follow these steps to get started. Docker Installation You'll need to install Docker to get started (which now comes preloaded with Compose ). Linux Instructions macOS Instructions On Linux, execute the following at the command line to install Docker, curl -fsSL https://get.docker.com | sh You can install Docker Desktop by following the instructions here . At the command line clone and enter Tomato's git repository , then copy over the .env configuration file. git clone https://github.com/dtcooper/tomato.git cd tomato/server cp .env.sample .env Development Mode Production Deployment Open up the .env file you just created using your favourite text editor. Action on the following, Set DEBUG flag to 1 \u2014 which tells Tomato to run in development mode. Now, create a symbolic link for the development Compose overrides, ln -s docker-compose.dev.yml docker-compose.overrides.yml Build the containers (or pull them by instead executing docker compose pull ), docker compose build Generating Sample Data If you just want to demo Tomato with loads of prefilled sample data, run this command, docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato Now bring up the server, docker compose up In your web browser, navigate to http://localhost:8000 . The default username and password, which you can (and should) change will be tomato and tomato . To stop the server, press Ctrl + C . Open up the .env file you just created using your favourite text editor. Take action on the following, Set DEBUG flag to 0 \u2014 which tells Tomato to run in production mode. Either set EMAIL_EXCEPTIONS_ENABLED to 0 to disable emails, or set it to 1 and edit all EMAIL_* values point to a properly configured SMTP server Setting Up an Nginx Container Reverse Proxying Yourself It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you. To do so, first make sure of the following in your .env file, DOMAIN_NAME is set to a domain name that resolves to a publicly accessible IP address of the server. CERTBOT_EMAIL is set to a valid email. DOMAIN_NAME and CERTBOT_EMAIL must be properly set! If you don't set DOMAIN_NAME and CERTBOT_EMAIL properly as described above, the production Nginx container will not start correctly. This is a requirement of Certbot , the underlying component that automatically generates an SSL certificate for you. Now, create a symbolic link for the Nginx overrides, ln -s docker-compose.nginx.yml docker-compose.overrides.yml Reverse proxying yourself is NOT recommended. This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port 80 and 443 available on your server. Create and edit a file named docker-compose.overrides.yml , server/docker-compose.overrides.yml services : app : ports : # Replace 1234 with any port you like - 127.0.0.1:1234:8000 Then in your web server, reverse proxy into port you chose. If you're using Nginx , you can use configuration like this, sample.conf server { # ... other Nginx config here location /assets/ { # Replace /home/user/tomato with the path you cloned the repository alias /home/user/tomato/server/serve/assets/ ; } location /static/ { # Replace /home/user/tomato here too alias /home/user/tomato/server/serve/static/ ; } location / { proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; # Replace 1234 with the port you chose above proxy_pass http://127.0.0.1:1234 ; } } Pull the containers (or build them by instead executing docker compose build ), docker compose pull Create an admin user by following the instructions after typing this at the command line, docker compose run --rm app ./manage.py createsuperuser Now bring up the server, docker compose up -d Head over to https://<DOMAIN_NAME>/ in your web browser. To stop the server, docker compose down Tomato will be configured to auto-restart on crashes, and and system start-up.","title":"Server"},{"location":"server/#the-tomato-backend-server","text":"The backend server is written in Python 's Django web framework , heavily leveraging its automatic admin interface .","title":"The Tomato Backend Server"},{"location":"server/#installation","text":"Follow these steps to get started. Docker Installation You'll need to install Docker to get started (which now comes preloaded with Compose ). Linux Instructions macOS Instructions On Linux, execute the following at the command line to install Docker, curl -fsSL https://get.docker.com | sh You can install Docker Desktop by following the instructions here . At the command line clone and enter Tomato's git repository , then copy over the .env configuration file. git clone https://github.com/dtcooper/tomato.git cd tomato/server cp .env.sample .env Development Mode Production Deployment Open up the .env file you just created using your favourite text editor. Action on the following, Set DEBUG flag to 1 \u2014 which tells Tomato to run in development mode. Now, create a symbolic link for the development Compose overrides, ln -s docker-compose.dev.yml docker-compose.overrides.yml Build the containers (or pull them by instead executing docker compose pull ), docker compose build Generating Sample Data If you just want to demo Tomato with loads of prefilled sample data, run this command, docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato Now bring up the server, docker compose up In your web browser, navigate to http://localhost:8000 . The default username and password, which you can (and should) change will be tomato and tomato . To stop the server, press Ctrl + C . Open up the .env file you just created using your favourite text editor. Take action on the following, Set DEBUG flag to 0 \u2014 which tells Tomato to run in production mode. Either set EMAIL_EXCEPTIONS_ENABLED to 0 to disable emails, or set it to 1 and edit all EMAIL_* values point to a properly configured SMTP server Setting Up an Nginx Container Reverse Proxying Yourself It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you. To do so, first make sure of the following in your .env file, DOMAIN_NAME is set to a domain name that resolves to a publicly accessible IP address of the server. CERTBOT_EMAIL is set to a valid email. DOMAIN_NAME and CERTBOT_EMAIL must be properly set! If you don't set DOMAIN_NAME and CERTBOT_EMAIL properly as described above, the production Nginx container will not start correctly. This is a requirement of Certbot , the underlying component that automatically generates an SSL certificate for you. Now, create a symbolic link for the Nginx overrides, ln -s docker-compose.nginx.yml docker-compose.overrides.yml Reverse proxying yourself is NOT recommended. This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port 80 and 443 available on your server. Create and edit a file named docker-compose.overrides.yml , server/docker-compose.overrides.yml services : app : ports : # Replace 1234 with any port you like - 127.0.0.1:1234:8000 Then in your web server, reverse proxy into port you chose. If you're using Nginx , you can use configuration like this, sample.conf server { # ... other Nginx config here location /assets/ { # Replace /home/user/tomato with the path you cloned the repository alias /home/user/tomato/server/serve/assets/ ; } location /static/ { # Replace /home/user/tomato here too alias /home/user/tomato/server/serve/static/ ; } location / { proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; # Replace 1234 with the port you chose above proxy_pass http://127.0.0.1:1234 ; } } Pull the containers (or build them by instead executing docker compose build ), docker compose pull Create an admin user by following the instructions after typing this at the command line, docker compose run --rm app ./manage.py createsuperuser Now bring up the server, docker compose up -d Head over to https://<DOMAIN_NAME>/ in your web browser. To stop the server, docker compose down Tomato will be configured to auto-restart on crashes, and and system start-up.","title":"Installation"}]}