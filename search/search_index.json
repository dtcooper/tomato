{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tomato","text":"<p>Welcome to Tomato Radio Automation!</p> <p>Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio.</p> <p>A Word of Caution</p> <p>Currently, Tomato is under active development.</p> <p>This documentation may not reflect the latest changes, or may include changes that are not yet available. Beware!</p> <p></p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>You'll probably want to either read about the desktop app and backend server.</p>"},{"location":"#use-case","title":"Use Case","text":"<p>The use case of Tomato is extremely simple by design.</p> <pre><code>flowchart RL\n    subgraph CLIENT_SERVER [Client-Server Relationship]\n        direction BT\n            client(\"Desktop App\\n&lt;em&gt;&lt;small&gt;(Client)&lt;/small&gt;&lt;/em&gt;\")\n            server(\"Backend Server\\n&lt;em&gt;&lt;small&gt;(Web UI)&lt;/small&gt;&lt;/em&gt;\")\n            server -- admins upload audio --&gt; client\n    end\n    subgraph STOPSET [Desktop App]\n        direction TB\n            stopset(\"App Plays Stop Set\\n&lt;em&gt;&lt;small&gt;(Commercial Break)&lt;/small&gt;&lt;/em&gt;\")\n            wait(\"App Waits\\n&lt;em&gt;&lt;small&gt;(Countdown Timer)&lt;/small&gt;&lt;/em&gt;\")\n            stopset --&gt; wait\n            wait -- user manually\\ntriggers stop set --&gt; stopset\n    end\n    CLIENT_SERVER -- app syncs\\nwith server &lt;---&gt; STOPSET</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Client and server relationship.</li> <li>Client<ul> <li>Supports periods of intermittent connectivity and runs offline. It syncs   with the server when it can.</li> <li>Can be used in \"demo mode,\" for end-users to try out the software without   needing to set up a server or connect to a production environment.</li> </ul> </li> <li>Server accepts a wide range of audio formats   and normalizes them to mp3.</li> <li>...and more!</li> </ul>"},{"location":"#non-features-what-tomato-is-not","title":"Non-Features (What Tomato is Not)","text":"<p>Tomato is not full automation software, it only automates the playing of short audio files grouped together, ie used for advertisements on the radio.</p> <p>Tomato does not support the playing of any kinds of music between ad breaks, instead relying on a live DJ to do that.</p>"},{"location":"#why-the-name","title":"Why The Name?","text":"<p>Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin.</p> <p></p> Tomato with his favorite mug."},{"location":"#whats-next","title":"What's Next?","text":"<p>First, familiarize yourself with some core concepts, then read about how to use the desktop app and backend server.</p>"},{"location":"client/","title":"The Tomato Desktop App","text":"<p>The desktop app is being developed and is in early preview stages. You can, however download preview builds or run the development code yourself.</p> <p></p>"},{"location":"client/#features-at-a-glance","title":"Features at a glance","text":""},{"location":"client/#user-interface-modes","title":"User Interface Modes","text":"<p>Tomato has three different user interface modes: simple, standard, and advanced to accommodate varying levels of literacy with audio software.</p> <p>Select a tab below to find out more about each mode.</p> <p>To change this, head to the settings click on the settings gear  and choose a \"user interface mode\".</p> <p></p> <p>User Interface Modes</p> Simple modeStandard modeAdvanced mode <p>The simplest mode Tomato can operate on. It has one Play button that plays through a stop set.</p> <p> Simple mode </p> <p>All other modes have a large button on the top that allow a confused user to return to this mode easily. It looks like this,</p> <p></p> <p>Standard mode builds on simple mode adding radial countdown clocks on each item in the playlist, more details progress/duration information, and Pause and Skip buttons that work on the currently playing asset.</p> <p> Standard mode </p> <p>Advanced mode builds on simple mode adding stop set control, allowing you to skip the currently playing stop set and regenerate the next stop set.</p> <p>This mode also adds individual play buttons next to all items in your playlist, for easy skipping ahead.</p> <p> Advanced mode </p>"},{"location":"client/#preview-builds","title":"Preview Builds","text":"<p>Development preview builds may not be safe: use them at your own risk.</p> <p>Preview builds are available on GitHub or can be download below.</p> <ul> <li> <p> macOS      \u2014 An application bundle with a  universal binary for Intel or Apple M1 chips</p> </li> <li> <p> Windows      \u2014 a Windows executable that automatically installs Tomato on first run (using     Squirrel.Windows)</p> </li> <li> <p>Linux  downloads:</p> <ul> <li> <p>Ubuntu , Debian  (and its derivatives), or Raspberry Pi </p> <ul> <li><code>.deb</code> package:  x86_64 (64-bit)     or  arm64 (Raspberry Pi)</li> </ul> </li> <li> <p>Arch  or Manjaro  \u2014 Packages for Tomato are available in the     Arch User Repository (AUR)</p> <ul> <li> <p>Latest preview build (<code>tomato-radio-automation-git</code>)</p> </li> <li> <p>Latest stable release (<code>tomato-radio-automation</code>)     \u2014 may NOT be compatible with the latest server version</p> </li> </ul> </li> <li> <p>Universal AppImage format</p> <ul> <li> <p><code>.AppImage</code> file:  x86_64 (64-bit) only</p> </li> <li> <p>To run using an AppImage, do the following on whatever Linux  distribution     you're using,</p> <pre><code>wget https://github.com/dtcooper/tomato/releases/download/preview-build/tomato-client-preview-linux_amd64.AppImage\nchmod +x tomato-client-preview-linux_amd64.AppImage\n./tomato-client-preview-linux_amd64.AppImage\n</code></pre> </li> </ul> </li> </ul> </li> </ul> <p>Unsigned Binaries</p> <p>The above releases are not signed nor notaraized, which means you may have to go through your operating system's security settings to be able to run them. (This just means I didn't pay Apple  or Microsoft  an unnecessary fee to avoid these warnings.)</p> <p>Read more about how to do that on macOS  here under the section \"If you want to open an app that hasn't been notarized or is from an unidentified developer.\"</p> <p>On Windows  you may get a message along the lines of \"Windows protected your PC\" in which you'll have to click More Info &gt; Run Anyway.</p>"},{"location":"client/#run-development-code","title":"Run Development Code","text":"<p>The development code runs on macOS  / Windows  / Linux .</p> <p>Prerequisites:</p> <ul> <li>Git<ul> <li>On Windows, install Git for Windows and   make sure to use its included \"Git Bash\" terminal.</li> </ul> </li> <li>Node.js v18+</li> </ul> <p>To get the development code running, in your terminal run the following (use \"Git Bash\" on Windows),</p> <pre><code># Clone the repo\ngit clone https://github.com/dtcooper/tomato.git\n\n# Enter the client code\ncd tomato/client\n\n# Windows only: set npm's script shell to bash\n[ \"$(uname -o)\" = \"Msys\" ] &amp;&amp; npm config --location=project set script-shell $(which bash)\n\n# Install dependencies and run\nnpm install\nnpm run dev\n</code></pre>"},{"location":"concepts/","title":"Core Concepts, Explained","text":"<p>Below is a list of concepts and an explanation of how they're used in Tomato.</p>"},{"location":"concepts/#audio-entities","title":"Audio Entities","text":"<p>Tomato's audio entities are a core concept, and they're defined below.</p>"},{"location":"concepts/#audio-asset","title":"Audio Asset","text":"<p>An audio asset is a short individual audio track (called an asset for short). Think individual advertisements, individual public service announcements, or individual station IDs.</p> <p>Assets always have a name and underlying audio file (like an mp3) but they can have additional data for example when they begin and end airing.</p> <p>Audio Asset Example</p> <p>A short advertisement audio clip named \"David's Steel Guitar Ad.\"</p>"},{"location":"concepts/#rotator","title":"Rotator","text":"<p>A rotator is a collection of similar audio assets. A rotator is how you to categorize assets into a group.</p> <p>While an asset can belong to more than one rotator, in practice they shouldn't.</p> <p>Rotator Example</p> <p>From the asset example above, you might put \"David's Steel Guitar Ad\" along with other short ads for musical instruments in the \"Musical Instrument Ads\" rotator.</p>"},{"location":"concepts/#stop-set","title":"Stop Set","text":"<p>A stop set is an ordered list of rotators. A stop set can be thought of as an entire commercial break, like what you'd hear in traditional radio. In order to play a stop set, an asset is selected at random<sup>1</sup> from each rotator in it.</p> <p>A rotator can be (and often is) in a stop set more than once. Think having station ID jingles at the start and end of a stop set, as in the example below.</p> Stop Set Example <p>If stop sets are a bit confusing to you, don't worry. Follow along.</p> <p>Let's say we have the following rotators created, and we've put assets in each of them them,</p> <pre><code>flowchart TD\n    sids(Station IDs\\n&lt;em&gt;Rotator&lt;/em&gt;)\n    psas(Public Service Announcements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n    ads(Advertisements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n    sid1(S_ID_1.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    sid2(S_ID_2.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    sid3(S_ID_3.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    sid1 --&gt; sids\n    sid2 --&gt; sids\n    sid3 --&gt; sids\n    psa1(PSA_1.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    psa2(PSA_2.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    psa1 --&gt; psas\n    psa2 --&gt; psas\n    ad1(AD_1.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    ad2(AD_2.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    ad3(AD_3.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    ad1 --&gt; ads\n    ad2 --&gt; ads\n    ad3 --&gt; ads</code></pre> <p>Then we have an  \"Evening Stop Set\", which contains this an ordered list of five rotators, shown here,</p> <pre><code>flowchart RL\n    stopset(Evening Stop Set)\n    subgraph \"Rotators in stop set\"\n        direction TB\n        rotator1(1. Station IDs\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator2(2. Advertisements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator3(3. Advertisements\\n&lt;em&gt;Rotator&lt;/em&gt;\\n&lt;strong&gt;&lt;small&gt;Repetition Allowed!&lt;/small&gt;&lt;/strong&gt;)\n        rotator4(4. Public Service Announcements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator5(5. Station IDs\\n&lt;em&gt;Rotator&lt;/em&gt;)\n    end\n    rotator1 --- stopset\n    rotator2 --- stopset\n    rotator3 --- stopset\n    rotator4 --- stopset\n    rotator5 --- stopset</code></pre> <p>Then, when an \"Evening Stop Set\" is generated and played by Tomato during a commercial break, here's what's played.</p> <pre><code>flowchart LR\n    subgraph \"Rotators in stop set\"\n        direction TB\n        rotator1(1. Station IDs\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator2(2. Advertisements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator3(3. Advertisements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator4(4. Public Service Announcements\\n&lt;em&gt;Rotator&lt;/em&gt;)\n        rotator5(5. Station IDs\\n&lt;em&gt;Rotator&lt;/em&gt;)\n    end\n    stopset(Evening Stop Set)\n    subgraph \"Assets played (generated)\"\n        direction TB\n        asset1(S_ID_2.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n        asset2(AD_3.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n        asset3(AD_1.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n        asset4(PSA_2.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n        asset5(S_ID_1.mp3\\n&lt;em&gt;Asset&lt;/em&gt;)\n    end\n    rotator1 --- stopset\n    rotator2 --- stopset\n    rotator3 --- stopset\n    rotator4 --- stopset\n    rotator5 --- stopset\n    asset1 -- randomly\\nselected\\nfrom rotator --- rotator1\n    asset2 -- randomly\\nselected\\nfrom rotator --- rotator2\n    asset3 -- randomly\\nselected\\nfrom rotator --- rotator3\n    asset4 -- randomly\\nselected\\nfrom rotator --- rotator4\n    asset5 -- randomly\\nselected\\nfrom rotator --- rotator5</code></pre> <p>Stop sets and generated stop sets</p> <p>Note, the above is a so-called \"generated\" stop set. It's an actual stop set that is played in the desktop client. We refer to these as generated because Tomato picks (or generates) individual assets to play.</p>"},{"location":"concepts/#relationship-diagram","title":"Relationship Diagram","text":"<p>Here's a simple relationship diagram for the entities described above.</p> <pre><code>flowchart RL\n    stopset{Stop Sets}\n    rotator{Rotators}\n    asset{Audio Assets}\n    rotator -- \"many-to-many\\nrelationship (ordered list)\" --&gt; stopset\n    asset -- \"many-to-many\\nrelationship\u00a0(set)\" --&gt; rotator</code></pre>"},{"location":"concepts/#wait-interval","title":"Wait Interval","text":"<p>Tomato's wait interval is how long the desktop app should wait before notifying the user that a stop set is due to be played.</p>"},{"location":"concepts/#weight","title":"Weight","text":"<p>Weight (or random weight) is how likely random selection of an item occurs, when compared to all other items of the same type. The default weight of an item with always \\(1\\) unless modified.</p> <p>Random weight is used when Tomato selects both assets and stop sets.</p> <p>The likeliness (or \"chance\") of an item \\(x\\) being selected is calculated as follows,</p> \\[ x_{\\text{chance}} = \\frac{x_{\\text{weight}}}{[\\text{sum all of item weights}]} \\] Weight Example <p>Let's dig a little deeper. For the purposes of this example, all assets are in a rotator called \"Commercials.\"</p> <p>If an asset named \"Commercial A\" has a weight of \\(2\\) and all other assets have a weight of \\(1\\), then asset \"Commercial A\" is twice as likely to be selected when compared to all other assets.</p> <p>Suppose there are 26 commercials \u2014 one for each letter of the alphabet \u2014 and they're named \"Commercial A\" through \"Commercial Z\".</p> <p>We assign a weight of \\(2\\) to \"Commercial A,\" or \\(\\text{A}_\\text{weight} = 2\\) and assign a weight of \\(1\\) to \"Commercial B\" through \"Commercial Z,\" or \\(\\text{B}_\\text{weight} = 1,\\ \\text{C}_\\text{weight} = 1,\\ \\ldots,\\ \\text{X}_\\text{weight} = 1,\\ \\text{Z}_\\text{weight} = 1\\).</p> <p>We get a sum of all random weights as \\(27\\), illustrated below,</p> \\[ \\begin{align*} [\\text{sum all of item weights}] &amp;= \\sum_{x=A}^{Z} x_\\text{weight} \\\\ &amp;= \\text{A}_\\text{weight} + (\\text{B}_\\text{weight} + \\text{C}_\\text{weight}     + \\ldots + \\text{X}_\\text{weight} +  \\text{Z}_\\text{weight}) \\\\ &amp;= 2 + (1 + 1 + \\ldots + 1 + 1) \\\\ &amp;= 2 + 25 \\\\ &amp;= 27 \\end{align*} \\] <p>Then, per the selection equation above,</p> \\[ \\begin{align*} \\text{A}_\\text{chance} &amp;= \\frac{\\text{A}_\\text{weight}}{\\text{     [sum all of item weights]}} \\\\ &amp;= \\frac{2}{27} \\\\ &amp;= 7.4\\% \\end{align*} \\] <p>So the chance we'll pick \"Commercial A\" with a random weight of \\(2\\) is \\(\\text{A}_\\text{chance} = 7.4\\%\\). Similarly,</p> \\[ \\begin{align*} \\text{B}_\\text{chance} &amp;= \\frac{\\text{B}_\\text{weight}}{\\text{[sum all of item weights]}} \\\\ &amp;= \\frac{1}{27} \\\\ &amp;= 3.7\\% \\end{align*} \\] <p>The chance we'll pick \"Commercial B\" with a weight of \\(1\\) is \\(\\text{B}_\\text{chance} = 3.7\\%\\)</p> <p>So as you can see, since \\(7.4\\%\\) is twice \\(3.7\\%\\), \"Commercial A\" with weight \\(2\\) is twice as likely to be played as \"Commercial B\" with weight \\(1\\).</p>"},{"location":"concepts/#anti-repeat-algorithm","title":"Anti-Repeat Algorithm","text":"<p>Tomato tries very hard not to repeat playing the same asset too soon. There are several sets of assets that can potentially be ignored as defined below.</p> <p>\\(\\text{ignores}_\\text{soft} = [\\text{assets played recently (within NO_REPEAT_ASSETS_TIME)}]\\)</p> <p>\\(\\text{ignores}_\\text{medium} = [\\text{assets on another generated stop set within current playlist}]\\)</p> <p>\\(\\text{ignores}_\\text{hard} = [\\text{assets that exist as previous entries in current generated stopset}]\\)</p> <p>Note</p> <p>\\(\\text{ignores}_\\text{soft}\\) will be an empty set if <code>NO_REPEAT_ASSETS_TIME = 0</code></p> <p>So \\(\\text{ignores}_\\text{soft}\\) are stuff that's played recently, \\(\\text{ignores}_\\text{medium}\\) are stuff that's going to play later in the playlist, and \\(\\text{ignores}_\\text{hard}\\) are assets in the current stopset.</p> <p>Suppose Tomato is ready to select an asset from a rotator. Tomato will attempt to ignore assets by trying to ignore them using the priority order as defined below. That's to say, it'll go through several tries to ignore assets. If Tomato can't select an asset, it'll proceed to the next try.</p> <p>Starting with the set of all eligible assets  in a rotator (enabled and valid air dates),</p> <ul> <li>Try #1: Ignore all assets in \\(\\text{ignores}_\\text{soft} \\cup \\text{ignores}_\\text{medium} \\cup \\text{ignores}_\\text{hard}\\)</li> <li>Try #2: Ignore all assets in \\(\\text{ignores}_\\text{medium} \\cup \\text{ignores}_\\text{hard}\\)</li> <li>Try #3: Ignore all assets in \\(\\text{ignores}_\\text{hard}\\)</li> <li>Try #4 (only if <code>ALLOW_REPEATS_IN_STOPSET = True</code>): Choose an asset from complete set of eligible assets</li> <li>Fail (no asset selected).</li> </ul> <ol> <li> <p>The random selection process can be biased by random weight and the anti-repeat algorithm \u21a9</p> </li> </ol>"},{"location":"license/","title":"Author &amp; License","text":""},{"location":"license/#author","title":"Author","text":"<p>Hi, I'm David Cooper, the author of Tomato. To find out more about me, check out my website at jew.pizza.</p>"},{"location":"license/#acknowledgements","title":"Acknowledgements","text":"<p>Tomato's UX and UI was designed in part by Miranda Kay. Testing and feedback was provided by the entire Burning Man Information Radio (BMIR) team.</p>"},{"location":"license/#license","title":"License","text":"<p>Tomato Radio Automation is offered under the permissive MIT license below,</p> <pre><code>MIT License\n\nCopyright (c) 2019-2024, David Cooper &lt;david.cooper@burningman.org&gt;\nCopyright (c) 2019-2024, Burning Man Information Radio (https://bmir.org/)\nCopyright (c) 2024, Miranda Kay &lt;miranda.e.key@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"server/","title":"The Tomato Backend Server","text":"<p>The backend server is written in Python's Django web framework, heavily leveraging its automatic admin interface.</p> <p>To get started, you'll have to install the server first.</p>"},{"location":"server/#configuration","title":"Configuration","text":""},{"location":"server/#user-interface-options","title":"User Interface Options","text":"<code>STATION_NAME</code> --- Type: String <p>The name of your station.</p> <p>Default: <code>'Tomato Radio Automation'</code></p> <code>UI_MODES</code> --- Type: Simple, standard, and/or advanced mode <p>Restrict what user interface modes are available to the desktop app.</p> <p>Default: <code>Simple &amp; standard mode</code></p> <code>UI_MODE_RESET_TIMES</code> --- Type: String <p>Reset UI mode to the simplest enabled mode according to this setting. Enter a list of times (<code>HH:MM</code> format) with each time on a single line. Set to 0 disable. The below example would reset the UI mode at midnight, 6am, noon, and 6pm:<code>00:0006:0012:0018:00</code></p> <p>Default: <code>'0'</code></p>"},{"location":"server/#server-processing-audio-options","title":"Server &amp; Processing Audio Options","text":"<code>AUDIO_BITRATE</code> --- Type: 32kbps through 320kbps <p>The audio bitrate to convert an asset to, if and only if processing is required.NOTE: processing is required when a file that is uploaded is not a valid MP3 file or TRIM_SILENCE is on.</p> <p>Default: <code>192kbps</code></p> <code>EXTRACT_METADATA_FROM_FILE</code> --- Type: Boolean (true or false) <p>Attempt to extract metadata from audio file when <code>True</code>, if this is set to <code>False</code> the system just uses filename. For example with mp3s, metadata would extracted from an ID3 tag.</p> <p>Default: <code>True</code></p> <code>PREVENT_DUPLICATE_ASSETS</code> --- Type: Boolean (true or false) <p>Prevent duplicate audio assets from being uploaded when <code>True</code>. If <code>False</code>, you may have multiple audio assets with the same underlying audio file.</p> <p>Default: <code>True</code></p> <code>TRIM_SILENCE</code> --- Type: Boolean (true or false) <p>Trim silence from the beginning and end of audio files when <code>True</code>. Since this processing is done on the server, it's applied only at the time an audio file is uploaded. This means files will have silence trimmed (or not) according to this setting at the time of upload.</p> <p>Default: <code>True</code></p> <code>RELOAD_PLAYLIST_AFTER_DATA_CHANGES</code> --- Type: Boolean (true or false) <p>Reload all connected client playlists when a data change occurs.</p> <p>Default: <code>False</code></p>"},{"location":"server/#desktop-client-options","title":"Desktop client options","text":"<code>BROADCAST_COMPRESSION</code> --- Type: Boolean (true or false) <p>Enable broadcast compression when <code>True</code>, smoothing out dynamic range in audio output.NOTE: compression is applied at the time you play an audio asset and performed on-the-fly in the desktop app.</p> <p>Default: <code>False</code></p> <code>WARN_ON_EMPTY_ROTATORS</code> --- Type: Boolean (true or false) <p>Warn when a rotator is disabled or has no eligible assets to choose from.</p> <p>Default: <code>True</code></p> <code>WAIT_INTERVAL</code> --- Type: Numeric <p>Time to wait between stop sets (in seconds). Set to 0 to disable the wait interval entirely.</p> <p>Default: <code>1200</code></p> <code>WAIT_INTERVAL_SUBTRACTS_FROM_STOPSET_PLAYTIME</code> --- Type: Boolean (true or false) <p>Wait time subtracts the playtime of a stop set in minutes when <code>True</code>. When enabled Tomato will provide more even results, ie the number of stop sets played per hour will be more consistent at the possible expense of an individual DJs air time.</p> <p>Default: <code>False</code></p> <code>WAIT_INTERVAL_SUBTRACTS_FROM_STOPSET_PLAYTIME_MIN_LENGTH</code> --- Type: Numeric <p>When <code>WAIT_INTERVAL_SUBTRACTS_FROM_STOPSET_PLAYTIME</code> is set to <code>True</code>, wait intervals are of variable length. A very long stopset might naively result in a negative wait interval. This setting avoids that by setting minimum wait interval length (in seconds).</p> <p>Default: <code>600</code></p> <code>NO_REPEAT_ASSETS_TIME</code> --- Type: Numeric <p>The time (in seconds) required to elapse for the Desktop app to attempt to not repeat any assets. Set to 0 to disable and allow potential repetition in the randomization algorithm. If there are not enough assets in a rotator to respect this setting, it will be ignored.</p> <p>Default: <code>0</code></p> <code>STOPSET_OVERDUE_TIME</code> --- Type: Numeric <p>The time (in seconds) after the <code>WAIT_INTERVAL</code> after which an \"overdue\" message will flash. Set to 0 disable.</p> <p>Default: <code>0</code></p> <code>STOPSET_PRELOAD_COUNT</code> --- Type: Numeric <p>Number of stopsets to preload in the UI. 2 or 3 are good values for this, since new data could make preloaded ones stale.</p> <p>Default: <code>2</code></p> <code>ALLOW_REPEATS_IN_STOPSET</code> --- Type: Boolean (true or false) <p>The randomization algorithm will try its absolute best to avoid duplicates. However, when that's not possible (for example because of a nearly empty rotator), do you want the same asset to repeat (<code>True</code>), or for the rotator to be ignored in a given stop set (<code>False</code>)?</p> <p>Default: <code>False</code></p> <code>END_DATE_PRIORITY_WEIGHT_MULTIPLIER</code> --- Type: Numeric <p>Multiply an asset's weight by this number if it has an end date and the current date is the end date. Set to 0 to disable this feature.</p> <p>Default: <code>0</code></p>"},{"location":"server/installation/","title":"Installation","text":""},{"location":"server/installation/#step-by-step","title":"Step by Step","text":"<p>Follow these steps to get started.</p> <p>Docker Installation</p> <p>You'll need to install Docker to get started (which now comes preloaded with Compose).</p> Linux InstructionsmacOS Instructions <p>On Linux, execute the following at the command line to install Docker,</p> <pre><code>curl -fsSL https://get.docker.com | sh\n</code></pre> <p>You can install Docker Desktop by following the instructions here.</p> <p>At the command line clone and enter Tomato's git repository, then copy over the <code>.env</code> configuration file.</p> <pre><code>git clone https://github.com/dtcooper/tomato.git\ncd tomato/server\ncp .env.sample .env\n</code></pre> Development ModeProduction Deployment <p>Open up the <code>.env</code> file you just created using your favourite text editor. Action on the following,</p> <ul> <li>Set <code>DEBUG</code> flag to <code>1</code> \u2014 which tells Tomato to run in development   mode.</li> </ul> <p>Now, create a symbolic link for the development Compose overrides,</p> <pre><code>ln -s docker-compose.dev.yml docker-compose.override.yml\n</code></pre> <p>Build the containers (or pull them by instead executing <code>docker compose pull</code>),</p> <pre><code>docker compose build\n</code></pre> <p>Generating Sample Data</p> <p>If you just want to demo Tomato with loads of prefilled sample data, run this command,</p> <pre><code>docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato\n</code></pre> <p>Now bring up the server,</p> <pre><code>docker compose up\n</code></pre> <p>In your web browser, navigate to http://localhost:8000.</p> <p>The default username and password, which you can (and should) change will be,</p> Username Password <code>tomato</code> <code>tomato</code> <p>To stop the server, press Ctrl+C.</p> <p>Open up the <code>.env</code> file you just created using your favorite text editor. Take action on the following,</p> <ol> <li>Set <code>DEBUG</code> flag to <code>0</code> \u2014 which tells Tomato to run in production    mode.</li> <li>Either set <code>EMAIL_EXCEPTIONS_ENABLED</code> to <code>0</code> to disable emails, or set it    to <code>1</code> and edit all <code>EMAIL_*</code> values to point to a properly configured    SMTP server</li> <li><code>DOMAIN_NAME</code> is set to a domain name that resolves to a publicly    accessible IP address of the server.</li> <li>Set <code>TOMATO_VERSION</code> to the specific release tag you want to use, ie    <code>v0.0.4</code>.</li> </ol> With Included Nginx ContainerReverse Proxying Yourself <p>It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you.</p> <p>To do so, first make sure of the following in your <code>.env</code> file,</p> <ul> <li><code>CERTBOT_EMAIL</code> is set to a valid email.</li> </ul> <p><code>DOMAIN_NAME</code> and <code>CERTBOT_EMAIL</code> must be properly set!</p> <p>If you don't set <code>DOMAIN_NAME</code> and <code>CERTBOT_EMAIL</code> properly as described above, the production Nginx container will not  start correctly. This is a requirement of Certbot, the underlying component that automatically generates an SSL certificate for you.</p> <p>The nginx container is now included in the default installation, so no further action need be taken.</p> <p>Reverse proxying yourself is NOT recommended.</p> <p>This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port <code>80</code> and <code>443</code> available on your server and still want to server Tomato on the default web ports.</p> <p>Create and edit a file named <code>docker-compose.override.yml</code>,</p> server/docker-compose.override.yml<pre><code>services:\n  logs:\n    ports:\n      # Replace 6666 with any port you like (logs server)\n      # WARNING: should NOT be accessible, mark \"internal;\" with Nginx\n      - 127.0.0.1:6666:8000\n  api:\n    ports:\n      # Replace 7777 with any port you like (api server)\n      - 127.0.0.1:7777:8000\n  app:\n    ports:\n      # Replace 8888 with any port you like (app server)\n      - 127.0.0.1:8888:8000\n  nginx:\n    profiles:\n      - do-not-start\n</code></pre> <p>Then in your web server, reverse proxy into the ports you chose.</p> <p>If you're using Nginx, you can use this configuration snippet,</p> tomato.conf<pre><code>server {\n  # ... your other Nginx config goes here\n\n  client_max_body_size 25M;\n\n  location /assets/ {\n    # Replace /home/user/tomato with the path you cloned the repository\n    alias /home/user/tomato/server/serve/assets/;\n  }\n\n  location /static/ {\n    # Replace /home/user/tomato here too\n    alias /home/user/tomato/server/serve/static/;\n  }\n\n  location /_internal/server-logs {\n    internal;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_buffering off;\n    proxy_cache off;\n    # Replace 6666 with the port you chose above (logs server)\n    proxy_pass http://127.0.0.1:6666/server-logs;\n  }\n\n  location /api/ {\n    proxy_http_version 1.1;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $http_host;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Real-IP $remote_addr;\n    # Replace 7777 with the port you chose above (api server)\n    proxy_pass http://127.0.0.1:7777;\n  }\n\n  location / {\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    # Replace 8888 with the port you chose above (app server)\n    proxy_pass http://127.0.0.1:8888;\n  }\n}\n</code></pre> <p>Logs server should be private!</p> <p>Access to the logs server should be private. For example, Tomato uses the Nginx feature X-Accel-Redirect to protect it. The Nginx configuration snippet functions correctly in this regard, but if you're using another web server, take care to configure it appropriately.</p> <p>Checkout the release tag you want to use and pull the containers (or build them by instead executing <code>docker compose build</code>),</p> <pre><code>git checkout v0.0.4\ndocker compose pull\n</code></pre> <p>Create an admin user by following the instructions after typing this at the command line,</p> <pre><code>docker compose run --rm app ./manage.py createsuperuser\n</code></pre> <p>Now bring up the server,</p> <pre><code>docker compose up -d\n</code></pre> <p>Head over to <code>https://&lt;DOMAIN_NAME&gt;/</code> in your web browser.</p> <p>To stop the server,</p> <pre><code>docker compose down\n</code></pre> <p>Tomato will be configured to auto-restart on crashes, and and system start-up.</p>"}]}