{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Tomato \u2190 Welcome to Tomato Radio Automation! Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio . Quickstart \u2190 You'll probably want to either read about the desktop app and backend server . Use Case \u2190 The use case of Tomato is extremely simple by design. flowchart RL subgraph CLIENT_SERVER [Client-Server Relationship] direction BT client(\"Desktop App\\n<em><small>(Client)</small></em>\") server(\"Backend Server\\n<em><small>(Web UI)</small></em>\") server -- admins upload audio --> client end subgraph STOPSET [Desktop App] direction TB stopset(\"App Plays Stop Set\\n<em><small>(Commercial Break)</small></em>\") wait(\"App Waits\\n<em><small>(Countdown Timer)</small></em>\") stopset --> wait wait -- user manually\\ntriggers stop set --> stopset end CLIENT_SERVER -- app syncs\\nwith server --> STOPSET Features \u2190 Why The Name? \u2190 Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin. Tomato with his favorite mug. What's Next? \u2190 First, familiarize yourself with some core concepts , then read about how to use the desktop app and backend server .","title":"Intro"},{"location":"#welcome-to-tomato","text":"Welcome to Tomato Radio Automation! Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio .","title":"Welcome to Tomato"},{"location":"#quickstart","text":"You'll probably want to either read about the desktop app and backend server .","title":"Quickstart"},{"location":"#use-case","text":"The use case of Tomato is extremely simple by design. flowchart RL subgraph CLIENT_SERVER [Client-Server Relationship] direction BT client(\"Desktop App\\n<em><small>(Client)</small></em>\") server(\"Backend Server\\n<em><small>(Web UI)</small></em>\") server -- admins upload audio --> client end subgraph STOPSET [Desktop App] direction TB stopset(\"App Plays Stop Set\\n<em><small>(Commercial Break)</small></em>\") wait(\"App Waits\\n<em><small>(Countdown Timer)</small></em>\") stopset --> wait wait -- user manually\\ntriggers stop set --> stopset end CLIENT_SERVER -- app syncs\\nwith server --> STOPSET","title":"Use Case"},{"location":"#features","text":"","title":"Features"},{"location":"#why-the-name","text":"Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin. Tomato with his favorite mug.","title":"Why The Name?"},{"location":"#whats-next","text":"First, familiarize yourself with some core concepts , then read about how to use the desktop app and backend server .","title":"What's Next?"},{"location":"client/","text":"The Tomato Desktop App \u2190 The desktop app is undocumented as it's being written and is in early alpha stages. You can, however download preview builds below. Preview Builds \u2190 Unsigned Binaries These below releases are not signed nor notaraized , which means you may have to go through your operating system's security settings to be able to run them. Download one of the following releases, macOS (Intel) macOS (Apple M1) Windows","title":"Desktop App"},{"location":"client/#the-tomato-desktop-app","text":"The desktop app is undocumented as it's being written and is in early alpha stages. You can, however download preview builds below.","title":"The Tomato Desktop App"},{"location":"client/#preview-builds","text":"Unsigned Binaries These below releases are not signed nor notaraized , which means you may have to go through your operating system's security settings to be able to run them. Download one of the following releases, macOS (Intel) macOS (Apple M1) Windows","title":"Preview Builds"},{"location":"concepts/","text":"Core Concepts, Explained \u2190 Below is a list of concepts and an explanation of how they're used in Tomato. Audio Entities \u2190 Tomato's audio entities are a core concept, and they're defined below. Audio Asset \u2190 An audio asset is a short individual audio track (also referred to as just an asset). Think individual advertisements, individual public service announcements, or individual station IDs. Assets always have a name and underlying audio file (like an mp3) but they can have additional data for example when they begin and end airing. Audio Asset Example A short advertisement audio clip named \"David's Steel Guitar Ad.\" Rotator \u2190 A rotator is a collection of similar audio assets. A rotator is how you to categorize assets into a group. While an asset can belong to more than one rotator, in practice they won't. Rotator Example From the asset example above, you might put \"David's Steel Guitar Ad\" along with other short ads for musical instruments in the \"Musical Instrument Ads\" rotator. Stop Set \u2190 A stop set is an ordered list of rotators. A stop set can be thought of as an entire commercial break, like what you'd hear in traditional radio. In order to play a stop set, an asset is selected at random 1 from each rotator in it. A rotator can be (and often is) in a stop set more than once. Think having station ID jingles at the start and end of a stop set, as in the example below. Stop Set Example If stop sets are a bit confusing to you, don't worry. Follow along. Let's say we have the following rotators created, and we've put assets in each of them them, flowchart TD sids(Station IDs\\n<em>Rotator</em>) psas(Public Service Announcements\\n<em>Rotator</em>) ads(Advertisements\\n<em>Rotator</em>) sid1(S_ID_1.mp3\\n<em>Asset</em>) sid2(S_ID_2.mp3\\n<em>Asset</em>) sid3(S_ID_3.mp3\\n<em>Asset</em>) sid1 --> sids sid2 --> sids sid3 --> sids psa1(PSA_1.mp3\\n<em>Asset</em>) psa2(PSA_2.mp3\\n<em>Asset</em>) psa1 --> psas psa2 --> psas ad1(AD_1.mp3\\n<em>Asset</em>) ad2(AD_2.mp3\\n<em>Asset</em>) ad3(AD_3.mp3\\n<em>Asset</em>) ad1 --> ads ad2 --> ads ad3 --> ads Then we have an \"Evening Stop Set\", which contains this an ordered list of five rotators, shown here, flowchart RL stopset(Evening Stop Set) subgraph \"Rotators in Stop Set\" direction TB rotator1(1. Station IDs\\n<em>Rotator</em>) rotator2(2. Advertisements\\n<em>Rotator</em>) rotator3(3. Advertisements\\n<em>Rotator</em>\\n<strong><small>Repetition Allowed!</small></strong>) rotator4(4. Public Service Announcements\\n<em>Rotator</em>) rotator5(5. Station IDs\\n<em>Rotator</em>) end rotator1 --- stopset rotator2 --- stopset rotator3 --- stopset rotator4 --- stopset rotator5 --- stopset Then, when an \"Evening Stop Set\" is played by Tomato during a commercial break, here's what's played, flowchart LR subgraph \"Rotators in Stop Set\" direction TB rotator1(1. Station IDs\\n<em>Rotator</em>) rotator2(2. Advertisements\\n<em>Rotator</em>) rotator3(3. Advertisements\\n<em>Rotator</em>) rotator4(4. Public Service Announcements\\n<em>Rotator</em>) rotator5(5. Station IDs\\n<em>Rotator</em>) end stopset(Evening Stop Set) subgraph \"Assets Played\" direction TB asset1(S_ID_2.mp3\\n<em>Asset</em>) asset2(AD_3.mp3\\n<em>Asset</em>) asset3(AD_1.mp3\\n<em>Asset</em>) asset4(PSA_2.mp3\\n<em>Asset</em>) asset5(S_ID_1.mp3\\n<em>Asset</em>) end rotator1 --- stopset rotator2 --- stopset rotator3 --- stopset rotator4 --- stopset rotator5 --- stopset asset1 -- randomly\\nselected --- rotator1 asset2 -- randomly\\nselected --- rotator2 asset3 -- randomly\\nselected --- rotator3 asset4 -- randomly\\nselected --- rotator4 asset5 -- randomly\\nselected --- rotator5 Relationship Diagram \u2190 Hhere's a simple relationship diagram for the entities described above. flowchart RL stopset{Stop Sets} rotator{Rotators} asset{Audio Assets} rotator -- \"many-to-many\\nrelationship (ordered list)\" --> stopset asset -- \"many-to-many\\nrelationship (set)\" --> rotator Wait Interval \u2190 Tomato's wait interval is how long the desktop app should wait before notifying the user that a stop set is due to be played. Weight \u2190 Weight (or random weight) is how likely random selection of an item occurs , when compared to all other items of the same type. The default weight of an item with always \\(1\\) unless modified. Random weight is used when Tomato selects both assets and stop sets. The likeliness (or \"chance\") of an item \\(x\\) being selected is calculated as follows, \\[ x_{\\text{chance}} = \\frac{x_{\\text{weight}}}{[\\text{sum all of item weights}]} \\] Weight Example Let's dig a little deeper. For the purposes of this example, all assets are in a rotator called \"Commercials.\" If an asset named \"Commercial A\" has a weight of \\(2\\) and all other assets have a weight of \\(1\\) , then asset \"Commercial A\" is twice as likely to be selected when compared to all other assets. Suppose there are 26 commercials \u2014 one for each letter of the alphabet \u2014 and they're named \"Commercial A\" through \"Commercial Z\" . We assign a weight of \\(2\\) to \"Commercial A,\" or \\(\\text{A}_\\text{weight} = 2\\) and assign a weight of \\(1\\) to \"Commercial B\" through \"Commercial Z,\" or \\(\\text{B}_\\text{weight} = 1,\\ \\text{C}_\\text{weight} = 1,\\ \\ldots,\\ \\text{X}_\\text{weight} = 1,\\ \\text{Z}_\\text{weight} = 1\\) . We get a sum of all random weights as \\(27\\) , illustrated below, \\[ \\begin{align*} [\\text{sum all of item weights}] &= \\sum_{x=A}^{Z} x_\\text{weight} \\\\ &= \\text{A}_\\text{weight} + (\\text{B}_\\text{weight} + \\text{C}_\\text{weight} + \\ldots + \\text{X}_\\text{weight} + \\text{Z}_\\text{weight}) \\\\ &= 2 + (1 + 1 + \\ldots + 1 + 1) \\\\ &= 2 + 25 \\\\ &= 27 \\end{align*} \\] Then, per the selection equation above, \\[ \\begin{align*} \\text{A}_\\text{chance} &= \\frac{\\text{A}_\\text{weight}}{\\text{ [sum all of item weights]}} \\\\ &= \\frac{2}{27} \\\\ &= 7.4\\% \\end{align*} \\] So the chance we'll pick \"Commercial A \" with a random weight of \\(2\\) is \\(\\text{A}_\\text{chance} = 7.4\\%\\) . Similarly, \\[ \\begin{align*} \\text{B}_\\text{chance} &= \\frac{\\text{B}_\\text{weight}}{\\text{[sum all of item weights]}} \\\\ &= \\frac{1}{27} \\\\ &= 3.7\\% \\end{align*} \\] The chance we'll pick \"Commercial B \" with a weight of \\(1\\) is \\(\\text{B}_\\text{chance} = 3.7\\%\\) So as you can see, since \\(7.4\\%\\) is twice \\(3.7\\%\\) , \"Commercial A\" with weight \\(2\\) is twice as likely to be played as \"Commercial B\" with weight \\(1\\) . The random selection process can be biased by random weight . \u21a9","title":"Concepts"},{"location":"concepts/#core-concepts-explained","text":"Below is a list of concepts and an explanation of how they're used in Tomato.","title":"Core Concepts, Explained"},{"location":"concepts/#audio-entities","text":"Tomato's audio entities are a core concept, and they're defined below.","title":"Audio Entities"},{"location":"concepts/#audio-asset","text":"An audio asset is a short individual audio track (also referred to as just an asset). Think individual advertisements, individual public service announcements, or individual station IDs. Assets always have a name and underlying audio file (like an mp3) but they can have additional data for example when they begin and end airing. Audio Asset Example A short advertisement audio clip named \"David's Steel Guitar Ad.\"","title":"Audio Asset"},{"location":"concepts/#rotator","text":"A rotator is a collection of similar audio assets. A rotator is how you to categorize assets into a group. While an asset can belong to more than one rotator, in practice they won't. Rotator Example From the asset example above, you might put \"David's Steel Guitar Ad\" along with other short ads for musical instruments in the \"Musical Instrument Ads\" rotator.","title":"Rotator"},{"location":"concepts/#stop-set","text":"A stop set is an ordered list of rotators. A stop set can be thought of as an entire commercial break, like what you'd hear in traditional radio. In order to play a stop set, an asset is selected at random 1 from each rotator in it. A rotator can be (and often is) in a stop set more than once. Think having station ID jingles at the start and end of a stop set, as in the example below. Stop Set Example If stop sets are a bit confusing to you, don't worry. Follow along. Let's say we have the following rotators created, and we've put assets in each of them them, flowchart TD sids(Station IDs\\n<em>Rotator</em>) psas(Public Service Announcements\\n<em>Rotator</em>) ads(Advertisements\\n<em>Rotator</em>) sid1(S_ID_1.mp3\\n<em>Asset</em>) sid2(S_ID_2.mp3\\n<em>Asset</em>) sid3(S_ID_3.mp3\\n<em>Asset</em>) sid1 --> sids sid2 --> sids sid3 --> sids psa1(PSA_1.mp3\\n<em>Asset</em>) psa2(PSA_2.mp3\\n<em>Asset</em>) psa1 --> psas psa2 --> psas ad1(AD_1.mp3\\n<em>Asset</em>) ad2(AD_2.mp3\\n<em>Asset</em>) ad3(AD_3.mp3\\n<em>Asset</em>) ad1 --> ads ad2 --> ads ad3 --> ads Then we have an \"Evening Stop Set\", which contains this an ordered list of five rotators, shown here, flowchart RL stopset(Evening Stop Set) subgraph \"Rotators in Stop Set\" direction TB rotator1(1. Station IDs\\n<em>Rotator</em>) rotator2(2. Advertisements\\n<em>Rotator</em>) rotator3(3. Advertisements\\n<em>Rotator</em>\\n<strong><small>Repetition Allowed!</small></strong>) rotator4(4. Public Service Announcements\\n<em>Rotator</em>) rotator5(5. Station IDs\\n<em>Rotator</em>) end rotator1 --- stopset rotator2 --- stopset rotator3 --- stopset rotator4 --- stopset rotator5 --- stopset Then, when an \"Evening Stop Set\" is played by Tomato during a commercial break, here's what's played, flowchart LR subgraph \"Rotators in Stop Set\" direction TB rotator1(1. Station IDs\\n<em>Rotator</em>) rotator2(2. Advertisements\\n<em>Rotator</em>) rotator3(3. Advertisements\\n<em>Rotator</em>) rotator4(4. Public Service Announcements\\n<em>Rotator</em>) rotator5(5. Station IDs\\n<em>Rotator</em>) end stopset(Evening Stop Set) subgraph \"Assets Played\" direction TB asset1(S_ID_2.mp3\\n<em>Asset</em>) asset2(AD_3.mp3\\n<em>Asset</em>) asset3(AD_1.mp3\\n<em>Asset</em>) asset4(PSA_2.mp3\\n<em>Asset</em>) asset5(S_ID_1.mp3\\n<em>Asset</em>) end rotator1 --- stopset rotator2 --- stopset rotator3 --- stopset rotator4 --- stopset rotator5 --- stopset asset1 -- randomly\\nselected --- rotator1 asset2 -- randomly\\nselected --- rotator2 asset3 -- randomly\\nselected --- rotator3 asset4 -- randomly\\nselected --- rotator4 asset5 -- randomly\\nselected --- rotator5","title":"Stop Set"},{"location":"concepts/#relationship-diagram","text":"Hhere's a simple relationship diagram for the entities described above. flowchart RL stopset{Stop Sets} rotator{Rotators} asset{Audio Assets} rotator -- \"many-to-many\\nrelationship (ordered list)\" --> stopset asset -- \"many-to-many\\nrelationship (set)\" --> rotator","title":"Relationship Diagram"},{"location":"concepts/#wait-interval","text":"Tomato's wait interval is how long the desktop app should wait before notifying the user that a stop set is due to be played.","title":"Wait Interval"},{"location":"concepts/#weight","text":"Weight (or random weight) is how likely random selection of an item occurs , when compared to all other items of the same type. The default weight of an item with always \\(1\\) unless modified. Random weight is used when Tomato selects both assets and stop sets. The likeliness (or \"chance\") of an item \\(x\\) being selected is calculated as follows, \\[ x_{\\text{chance}} = \\frac{x_{\\text{weight}}}{[\\text{sum all of item weights}]} \\] Weight Example Let's dig a little deeper. For the purposes of this example, all assets are in a rotator called \"Commercials.\" If an asset named \"Commercial A\" has a weight of \\(2\\) and all other assets have a weight of \\(1\\) , then asset \"Commercial A\" is twice as likely to be selected when compared to all other assets. Suppose there are 26 commercials \u2014 one for each letter of the alphabet \u2014 and they're named \"Commercial A\" through \"Commercial Z\" . We assign a weight of \\(2\\) to \"Commercial A,\" or \\(\\text{A}_\\text{weight} = 2\\) and assign a weight of \\(1\\) to \"Commercial B\" through \"Commercial Z,\" or \\(\\text{B}_\\text{weight} = 1,\\ \\text{C}_\\text{weight} = 1,\\ \\ldots,\\ \\text{X}_\\text{weight} = 1,\\ \\text{Z}_\\text{weight} = 1\\) . We get a sum of all random weights as \\(27\\) , illustrated below, \\[ \\begin{align*} [\\text{sum all of item weights}] &= \\sum_{x=A}^{Z} x_\\text{weight} \\\\ &= \\text{A}_\\text{weight} + (\\text{B}_\\text{weight} + \\text{C}_\\text{weight} + \\ldots + \\text{X}_\\text{weight} + \\text{Z}_\\text{weight}) \\\\ &= 2 + (1 + 1 + \\ldots + 1 + 1) \\\\ &= 2 + 25 \\\\ &= 27 \\end{align*} \\] Then, per the selection equation above, \\[ \\begin{align*} \\text{A}_\\text{chance} &= \\frac{\\text{A}_\\text{weight}}{\\text{ [sum all of item weights]}} \\\\ &= \\frac{2}{27} \\\\ &= 7.4\\% \\end{align*} \\] So the chance we'll pick \"Commercial A \" with a random weight of \\(2\\) is \\(\\text{A}_\\text{chance} = 7.4\\%\\) . Similarly, \\[ \\begin{align*} \\text{B}_\\text{chance} &= \\frac{\\text{B}_\\text{weight}}{\\text{[sum all of item weights]}} \\\\ &= \\frac{1}{27} \\\\ &= 3.7\\% \\end{align*} \\] The chance we'll pick \"Commercial B \" with a weight of \\(1\\) is \\(\\text{B}_\\text{chance} = 3.7\\%\\) So as you can see, since \\(7.4\\%\\) is twice \\(3.7\\%\\) , \"Commercial A\" with weight \\(2\\) is twice as likely to be played as \"Commercial B\" with weight \\(1\\) . The random selection process can be biased by random weight . \u21a9","title":"Weight"},{"location":"license/","text":"Author & License \u2190 Author \u2190 Hi, I'm David Cooper, the author of Tomato. To find out more about me, check out my website at jew.pizza . License \u2190 Tomato Radio Automation is offered under the permissive MIT license below, MIT License Copyright (c) 2019-2022, David Cooper <david.cooper@burningman.org> Copyright (c) 2019-2022, Burning Man Information Radio (https://bmir.org/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Author & License"},{"location":"license/#author-license","text":"","title":"Author &amp; License"},{"location":"license/#author","text":"Hi, I'm David Cooper, the author of Tomato. To find out more about me, check out my website at jew.pizza .","title":"Author"},{"location":"license/#license","text":"Tomato Radio Automation is offered under the permissive MIT license below, MIT License Copyright (c) 2019-2022, David Cooper <david.cooper@burningman.org> Copyright (c) 2019-2022, Burning Man Information Radio (https://bmir.org/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"server/","text":"The Tomato Backend Server \u2190 The backend server is written in Python 's Django web framework , heavily leveraging its automatic admin interface. Installation \u2190 Follow these steps to get started. Docker Installation You'll need to install Docker to get started (which now comes preloaded with Compose ). Linux Instructions macOS Instructions On Linux, execute the following at the command line to install Docker, curl -fsSL https://get.docker.com | sh You can install Docker Desktop by following the instructions here . At the command line clone and enter Tomato's git repository , then copy over the .env configuration file. git clone https://github.com/dtcooper/tomato.git cd tomato/server cp .env.sample .env Development Mode Production Deployment Open up the .env file you just created using your favourite text editor. Action on the following, Set DEBUG flag to 1 \u2014 which tells Tomato to run in development mode. Now, create a symbolic link for the development Compose overrides, ln -s docker-compose.dev.yml docker-compose.overrides.yml Build the containers (or pull them by instead executing docker compose pull ), docker compose build Generating Sample Data If you just want to demo Tomato with loads of prefilled sample data, run this command, docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato Now bring up the server, docker compose up In your web browser, navigate to http://localhost:8000 . The default username and password, which you can (and should) change will be, Username Password tomato tomato To stop the server, press Ctrl + C . Open up the .env file you just created using your favorite text editor. Take action on the following, Set DEBUG flag to 0 \u2014 which tells Tomato to run in production mode. Either set EMAIL_EXCEPTIONS_ENABLED to 0 to disable emails, or set it to 1 and edit all EMAIL_* values to point to a properly configured SMTP server DOMAIN_NAME is set to a domain name that resolves to a publicly accessible IP address of the server. Setting Up an Nginx Container Reverse Proxying Yourself It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you. To do so, first make sure of the following in your .env file, CERTBOT_EMAIL is set to a valid email. DOMAIN_NAME and CERTBOT_EMAIL must be properly set! If you don't set DOMAIN_NAME and CERTBOT_EMAIL properly as described above, the production Nginx container will not start correctly. This is a requirement of Certbot , the underlying component that automatically generates an SSL certificate for you. Now, create a symbolic link for the Nginx Compose overrides, ln -s docker-compose.nginx.yml docker-compose.overrides.yml Reverse proxying yourself is NOT recommended. This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port 80 and 443 available on your server. Create and edit a file named docker-compose.overrides.yml , server/docker-compose.overrides.yml services : app : ports : # Replace 1234 with any port you like (app server) - 127.0.0.1:1234:8000 logs : ports : # Replace 4321 with any port you like (logs server) - 127.0.0.1:4321:8000 Then in your web server, reverse proxy into port you chose. If you're using Nginx, you can use configuration like this, sample.conf server { # ... other Nginx config here location /assets/ { # Replace /home/user/tomato with the path you cloned the repository alias /home/user/tomato/server/serve/assets/ ; } location /static/ { # Replace /home/user/tomato here too alias /home/user/tomato/server/serve/static/ ; } location /_internal/server-logs { internal ; proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_buffering off ; proxy_cache off ; # Replace 1234 with the port you chose above (logs server) proxy_pass http://127.0.0.1:4321/server-logs ; } location / { proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; # Replace 1234 with the port you chose above (app server) proxy_pass http://127.0.0.1:1234 ; } } Pull the containers (or build them by instead executing docker compose build ), docker compose pull Create an admin user by following the instructions after typing this at the command line, docker compose run --rm app ./manage.py createsuperuser Now bring up the server, docker compose up -d Head over to https://<DOMAIN_NAME>/ in your web browser. To stop the server, docker compose down Tomato will be configured to auto-restart on crashes, and and system start-up.","title":"Server"},{"location":"server/#the-tomato-backend-server","text":"The backend server is written in Python 's Django web framework , heavily leveraging its automatic admin interface.","title":"The Tomato Backend Server"},{"location":"server/#installation","text":"Follow these steps to get started. Docker Installation You'll need to install Docker to get started (which now comes preloaded with Compose ). Linux Instructions macOS Instructions On Linux, execute the following at the command line to install Docker, curl -fsSL https://get.docker.com | sh You can install Docker Desktop by following the instructions here . At the command line clone and enter Tomato's git repository , then copy over the .env configuration file. git clone https://github.com/dtcooper/tomato.git cd tomato/server cp .env.sample .env Development Mode Production Deployment Open up the .env file you just created using your favourite text editor. Action on the following, Set DEBUG flag to 1 \u2014 which tells Tomato to run in development mode. Now, create a symbolic link for the development Compose overrides, ln -s docker-compose.dev.yml docker-compose.overrides.yml Build the containers (or pull them by instead executing docker compose pull ), docker compose build Generating Sample Data If you just want to demo Tomato with loads of prefilled sample data, run this command, docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato Now bring up the server, docker compose up In your web browser, navigate to http://localhost:8000 . The default username and password, which you can (and should) change will be, Username Password tomato tomato To stop the server, press Ctrl + C . Open up the .env file you just created using your favorite text editor. Take action on the following, Set DEBUG flag to 0 \u2014 which tells Tomato to run in production mode. Either set EMAIL_EXCEPTIONS_ENABLED to 0 to disable emails, or set it to 1 and edit all EMAIL_* values to point to a properly configured SMTP server DOMAIN_NAME is set to a domain name that resolves to a publicly accessible IP address of the server. Setting Up an Nginx Container Reverse Proxying Yourself It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you. To do so, first make sure of the following in your .env file, CERTBOT_EMAIL is set to a valid email. DOMAIN_NAME and CERTBOT_EMAIL must be properly set! If you don't set DOMAIN_NAME and CERTBOT_EMAIL properly as described above, the production Nginx container will not start correctly. This is a requirement of Certbot , the underlying component that automatically generates an SSL certificate for you. Now, create a symbolic link for the Nginx Compose overrides, ln -s docker-compose.nginx.yml docker-compose.overrides.yml Reverse proxying yourself is NOT recommended. This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port 80 and 443 available on your server. Create and edit a file named docker-compose.overrides.yml , server/docker-compose.overrides.yml services : app : ports : # Replace 1234 with any port you like (app server) - 127.0.0.1:1234:8000 logs : ports : # Replace 4321 with any port you like (logs server) - 127.0.0.1:4321:8000 Then in your web server, reverse proxy into port you chose. If you're using Nginx, you can use configuration like this, sample.conf server { # ... other Nginx config here location /assets/ { # Replace /home/user/tomato with the path you cloned the repository alias /home/user/tomato/server/serve/assets/ ; } location /static/ { # Replace /home/user/tomato here too alias /home/user/tomato/server/serve/static/ ; } location /_internal/server-logs { internal ; proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; proxy_buffering off ; proxy_cache off ; # Replace 1234 with the port you chose above (logs server) proxy_pass http://127.0.0.1:4321/server-logs ; } location / { proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; # Replace 1234 with the port you chose above (app server) proxy_pass http://127.0.0.1:1234 ; } } Pull the containers (or build them by instead executing docker compose build ), docker compose pull Create an admin user by following the instructions after typing this at the command line, docker compose run --rm app ./manage.py createsuperuser Now bring up the server, docker compose up -d Head over to https://<DOMAIN_NAME>/ in your web browser. To stop the server, docker compose down Tomato will be configured to auto-restart on crashes, and and system start-up.","title":"Installation"}]}