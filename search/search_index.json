{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Tomato \u2190 Welcome to Tomato Radio Automation! Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio . Use Case \u2190 Features \u2190 Why The Name? \u2190 Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin. Tomato with his favorite mug. What's Next? \u2190","title":"Intro"},{"location":"#welcome-to-tomato","text":"Welcome to Tomato Radio Automation! Tomato is easy to use, and hard to screw up playout software written for the specific use case of Burning Man Information Radio .","title":"Welcome to Tomato"},{"location":"#use-case","text":"","title":"Use Case"},{"location":"#features","text":"","title":"Features"},{"location":"#why-the-name","text":"Simply said, this software was named after my cat, Tomato... or more affectionately nicknamed Kitty, Tomatillo, The \"Shink\", Catly, Catniss Evercat, Mr. Annoying, and Kitty Poopoo. His breed: domestic street urchin. Tomato with his favorite mug.","title":"Why The Name?"},{"location":"#whats-next","text":"","title":"What's Next?"},{"location":"client/","text":"The Tomato Desktop Client \u2190 Currently the desktop client has not been written. Head over to the backend server docs to get started!","title":"Client"},{"location":"client/#the-tomato-desktop-client","text":"Currently the desktop client has not been written. Head over to the backend server docs to get started!","title":"The Tomato Desktop Client"},{"location":"concepts/","text":"Core Concepts, Explained \u2190 Glossary of Terms \u2190 Below is a list of terms and an explanation of how they're used in Tomato. Audio Asset \u2190 An audio asset is a short individual audio track (also referred to as just an asset). Think individual advertisements, individual public service announcements, or individual station IDs. Assets always have a name and underlying audio file (like an mp3) but they can have additional data like when they begin and end airing, or whether their enabled at all. Audio Asset Example And example would be a short advertisement audio clip named \"David's Steel Guitar Ad.\" Rotator \u2190 A rotator is a collection of audio assets. A rotator represents a way to categorize assets into the same group. While an asset can belong to more than one rotator, in practice they won't. Rotator Example From the asset example above, you might put \"David's Steel Guitar Ad\" along with other short ads for musical instruments in the \"Musical Instrument Ads\" rotator. Stop Set \u2190 A stop set is an ordered list of rotators. A stop set can be thought of as an entire commercial break, like in traditional radio. To \"play\" a stop set, an asset is selected at random 1 from each rotator in a stop set. A rotator can be (and often is) in a stop set more than once. If that sounds a bit confusing to you, don't worry. Check out the example below, Stop Set Example Let's say we have the following rotators created, and we've put assets in each of them them, Rotator Audio Assets in Rotator Station IDs S_ID_1.mp3 , S_ID_2.mp3 , and S_ID_3.mp3 Public Service Announcements PSA_1.mp3 and PSA_2.mp3 Advertisements AD_1.mp3 , AD_2.mp3 , and AD_3.mp3 Then we have an \"Evening Stop Set\", which contains this an ordered list of five rotators, shown here, Order in Stop Set Rotator 1 Station IDs 2 Advertisements 3 Advertisements (repetition allowed) 4 Public Service Announcements 5 Station IDs Then, when an \"Evening Stop Set\" is played by Tomato during a commercial break, Tomato plays through the following five randomly selected assets. Order in Stop Set Audio Asset (Randomly Selected) 1 S_ID_2 \u2014 selected from Station IDs 2 AD_3 \u2014 selected from Advertisements 3 AD_1 \u2014 selected from Advertisements 4 PSA_2 \u2014 selected from Public Service Announcements 5 S_ID_1 \u2014 selected from Station IDs Random Weight \u2190 The weight of how likely random selection occurs of an item occurs, when compared to all other items in a set. The default random weight with Tomato is always \\(1\\) . Random weight is used when Tomato selects both assets and stop sets. The likeliness of an item x being selected is calculated as follows, \\[ \\text{chance of selection of item} = \\frac{\\text{random weight of item}}{\\text{sum all of item random weights}} \\] Random Weight Example If an asset \"Commercial A\" has a weight of \\(2\\) and all other assets have a weight of \\(1\\) , then asset \"Commercial A\" is twice as likely to be selected when compared to all other assets. Suppose there are 26 commercials, named \"Commercial A\" through \"Commercial Z\", with \"A\" having a weight of \\(2\\) and the rest having a weight of \\(1\\) . We get a sum of all random weights as \\(27\\) . \\[ \\begin{align*} \\text{sum all of item random weights} &= \\text{Commercial A}_\\text{weight} + \\text{Commercial A}_\\text{weight} + \\ldots + \\text{Commercial Z}_\\text{weight} \\\\ &= 2 + 1 + \\ldots + 1 \\\\ &= 27 \\end{align*} \\] Per the selection equation above, the change we'll pick \"Commercial A \" with a range weight of \\(2\\) is, \\[ \\begin{align*} \\text{Commercial A}_\\text{selection chance} &= \\frac{\\text{Commercial A}_\\text{weight}}{\\text{sum all of item random weights}} \\\\ &= \\frac{2}{27} \\\\ &\\simeq 7.4\\% \\end{align*} \\] Per the selection equation above, the change we'll pick \"Commercial B \" with a range weight of \\(1\\) is, \\[ \\begin{align*} \\text{Commercial B}_\\text{selection chance} &= \\frac{\\text{Commercial B}_\\text{weight}}{\\text{sum all of item random weights}} \\\\ &= \\frac{1}{27} \\\\ &\\simeq 3.7\\% \\end{align*} \\] So you can see, since \\(7.4\\%\\) is twice \\(3.7\\%\\) , \"Commercial A\" is twice as likely to be played as \"Commercial B\" because of its weight of \\(2\\) . The random selection process can be biased by random weight. \u21a9","title":"Concepts"},{"location":"concepts/#core-concepts-explained","text":"","title":"Core Concepts, Explained"},{"location":"concepts/#glossary-of-terms","text":"Below is a list of terms and an explanation of how they're used in Tomato.","title":"Glossary of Terms"},{"location":"concepts/#audio-asset","text":"An audio asset is a short individual audio track (also referred to as just an asset). Think individual advertisements, individual public service announcements, or individual station IDs. Assets always have a name and underlying audio file (like an mp3) but they can have additional data like when they begin and end airing, or whether their enabled at all. Audio Asset Example And example would be a short advertisement audio clip named \"David's Steel Guitar Ad.\"","title":"Audio Asset"},{"location":"concepts/#rotator","text":"A rotator is a collection of audio assets. A rotator represents a way to categorize assets into the same group. While an asset can belong to more than one rotator, in practice they won't. Rotator Example From the asset example above, you might put \"David's Steel Guitar Ad\" along with other short ads for musical instruments in the \"Musical Instrument Ads\" rotator.","title":"Rotator"},{"location":"concepts/#stop-set","text":"A stop set is an ordered list of rotators. A stop set can be thought of as an entire commercial break, like in traditional radio. To \"play\" a stop set, an asset is selected at random 1 from each rotator in a stop set. A rotator can be (and often is) in a stop set more than once. If that sounds a bit confusing to you, don't worry. Check out the example below, Stop Set Example Let's say we have the following rotators created, and we've put assets in each of them them, Rotator Audio Assets in Rotator Station IDs S_ID_1.mp3 , S_ID_2.mp3 , and S_ID_3.mp3 Public Service Announcements PSA_1.mp3 and PSA_2.mp3 Advertisements AD_1.mp3 , AD_2.mp3 , and AD_3.mp3 Then we have an \"Evening Stop Set\", which contains this an ordered list of five rotators, shown here, Order in Stop Set Rotator 1 Station IDs 2 Advertisements 3 Advertisements (repetition allowed) 4 Public Service Announcements 5 Station IDs Then, when an \"Evening Stop Set\" is played by Tomato during a commercial break, Tomato plays through the following five randomly selected assets. Order in Stop Set Audio Asset (Randomly Selected) 1 S_ID_2 \u2014 selected from Station IDs 2 AD_3 \u2014 selected from Advertisements 3 AD_1 \u2014 selected from Advertisements 4 PSA_2 \u2014 selected from Public Service Announcements 5 S_ID_1 \u2014 selected from Station IDs","title":"Stop Set"},{"location":"concepts/#random-weight","text":"The weight of how likely random selection occurs of an item occurs, when compared to all other items in a set. The default random weight with Tomato is always \\(1\\) . Random weight is used when Tomato selects both assets and stop sets. The likeliness of an item x being selected is calculated as follows, \\[ \\text{chance of selection of item} = \\frac{\\text{random weight of item}}{\\text{sum all of item random weights}} \\] Random Weight Example If an asset \"Commercial A\" has a weight of \\(2\\) and all other assets have a weight of \\(1\\) , then asset \"Commercial A\" is twice as likely to be selected when compared to all other assets. Suppose there are 26 commercials, named \"Commercial A\" through \"Commercial Z\", with \"A\" having a weight of \\(2\\) and the rest having a weight of \\(1\\) . We get a sum of all random weights as \\(27\\) . \\[ \\begin{align*} \\text{sum all of item random weights} &= \\text{Commercial A}_\\text{weight} + \\text{Commercial A}_\\text{weight} + \\ldots + \\text{Commercial Z}_\\text{weight} \\\\ &= 2 + 1 + \\ldots + 1 \\\\ &= 27 \\end{align*} \\] Per the selection equation above, the change we'll pick \"Commercial A \" with a range weight of \\(2\\) is, \\[ \\begin{align*} \\text{Commercial A}_\\text{selection chance} &= \\frac{\\text{Commercial A}_\\text{weight}}{\\text{sum all of item random weights}} \\\\ &= \\frac{2}{27} \\\\ &\\simeq 7.4\\% \\end{align*} \\] Per the selection equation above, the change we'll pick \"Commercial B \" with a range weight of \\(1\\) is, \\[ \\begin{align*} \\text{Commercial B}_\\text{selection chance} &= \\frac{\\text{Commercial B}_\\text{weight}}{\\text{sum all of item random weights}} \\\\ &= \\frac{1}{27} \\\\ &\\simeq 3.7\\% \\end{align*} \\] So you can see, since \\(7.4\\%\\) is twice \\(3.7\\%\\) , \"Commercial A\" is twice as likely to be played as \"Commercial B\" because of its weight of \\(2\\) . The random selection process can be biased by random weight. \u21a9","title":"Random Weight"},{"location":"license/","text":"Author & License \u2190 Author \u2190 Hi, I'm David Cooper, the author of Tomato., reachable at david.cooper@burningman.org . License \u2190 Tomato Radio Automation is offered under the permissive MIT license below, MIT License Copyright (c) 2019-2022, David Cooper <david.cooper@burningman.org> Copyright (c) 2019-2022, Burning Man Information Radio (https://bmir.org/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Author & License"},{"location":"license/#author-license","text":"","title":"Author &amp; License"},{"location":"license/#author","text":"Hi, I'm David Cooper, the author of Tomato., reachable at david.cooper@burningman.org .","title":"Author"},{"location":"license/#license","text":"Tomato Radio Automation is offered under the permissive MIT license below, MIT License Copyright (c) 2019-2022, David Cooper <david.cooper@burningman.org> Copyright (c) 2019-2022, Burning Man Information Radio (https://bmir.org/) Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"server/","text":"The Tomato Backend Server \u2190 The backend server is written in Python 's Django web framework , heavily leveraging its automatic admin interface . Installation \u2190 Follow these steps to get started. Docker Installation You'll need to install Docker to get started (which now comes preloaded with Compose ). Linux Instructions macOS Instructions On Linux, execute the following at the command line to install Docker, curl -fsSL https://get.docker.com | sh You can install Docker Desktop by following the instructions here . At the command line clone and enter Tomato's git repository , then copy over the .env configuration file. git clone https://github.com/dtcooper/tomato.git cd tomato/server cp .env.sample .env Development Mode Production Deployment Open up the .env file you just created using your favourite text editor. Action on the following, Set DEBUG flag to 1 \u2014 which tells Tomato to run in development mode. Now, create a symbolic link for the development Compose overrides, ln -s docker-compose.dev.yml docker-compose.overrides.yml Build the containers (or pull them by instead executing docker compose pull ), docker compose build Generating Sample Data If you just want to demo Tomato with loads of prefilled sample data, run this command, docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato Now bring up the server, docker compose up In your web browser, navigate to http://localhost:8000 . The default username and password, which you can (and should) change will be, Username Password tomato tomato To stop the server, press Ctrl + C . Open up the .env file you just created using your favorite text editor. Take action on the following, Set DEBUG flag to 0 \u2014 which tells Tomato to run in production mode. Either set EMAIL_EXCEPTIONS_ENABLED to 0 to disable emails, or set it to 1 and edit all EMAIL_* values to point to a properly configured SMTP server DOMAIN_NAME is set to a domain name that resolves to a publicly accessible IP address of the server. Setting Up an Nginx Container Reverse Proxying Yourself It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you. To do so, first make sure of the following in your .env file, CERTBOT_EMAIL is set to a valid email. DOMAIN_NAME and CERTBOT_EMAIL must be properly set! If you don't set DOMAIN_NAME and CERTBOT_EMAIL properly as described above, the production Nginx container will not start correctly. This is a requirement of Certbot , the underlying component that automatically generates an SSL certificate for you. Now, create a symbolic link for the Nginx overrides, ln -s docker-compose.nginx.yml docker-compose.overrides.yml Reverse proxying yourself is NOT recommended. This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port 80 and 443 available on your server. Create and edit a file named docker-compose.overrides.yml , server/docker-compose.overrides.yml services : app : ports : # Replace 1234 with any port you like - 127.0.0.1:1234:8000 Then in your web server, reverse proxy into port you chose. If you're using Nginx , you can use configuration like this, sample.conf server { # ... other Nginx config here location /assets/ { # Replace /home/user/tomato with the path you cloned the repository alias /home/user/tomato/server/serve/assets/ ; } location /static/ { # Replace /home/user/tomato here too alias /home/user/tomato/server/serve/static/ ; } location / { proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; # Replace 1234 with the port you chose above proxy_pass http://127.0.0.1:1234 ; } } Pull the containers (or build them by instead executing docker compose build ), docker compose pull Create an admin user by following the instructions after typing this at the command line, docker compose run --rm app ./manage.py createsuperuser Now bring up the server, docker compose up -d Head over to https://<DOMAIN_NAME>/ in your web browser. To stop the server, docker compose down Tomato will be configured to auto-restart on crashes, and and system start-up.","title":"Server"},{"location":"server/#the-tomato-backend-server","text":"The backend server is written in Python 's Django web framework , heavily leveraging its automatic admin interface .","title":"The Tomato Backend Server"},{"location":"server/#installation","text":"Follow these steps to get started. Docker Installation You'll need to install Docker to get started (which now comes preloaded with Compose ). Linux Instructions macOS Instructions On Linux, execute the following at the command line to install Docker, curl -fsSL https://get.docker.com | sh You can install Docker Desktop by following the instructions here . At the command line clone and enter Tomato's git repository , then copy over the .env configuration file. git clone https://github.com/dtcooper/tomato.git cd tomato/server cp .env.sample .env Development Mode Production Deployment Open up the .env file you just created using your favourite text editor. Action on the following, Set DEBUG flag to 1 \u2014 which tells Tomato to run in development mode. Now, create a symbolic link for the development Compose overrides, ln -s docker-compose.dev.yml docker-compose.overrides.yml Build the containers (or pull them by instead executing docker compose pull ), docker compose build Generating Sample Data If you just want to demo Tomato with loads of prefilled sample data, run this command, docker compose run --rm app ./manage.py prefill_sample_data --created-by tomato Now bring up the server, docker compose up In your web browser, navigate to http://localhost:8000 . The default username and password, which you can (and should) change will be, Username Password tomato tomato To stop the server, press Ctrl + C . Open up the .env file you just created using your favorite text editor. Take action on the following, Set DEBUG flag to 0 \u2014 which tells Tomato to run in production mode. Either set EMAIL_EXCEPTIONS_ENABLED to 0 to disable emails, or set it to 1 and edit all EMAIL_* values to point to a properly configured SMTP server DOMAIN_NAME is set to a domain name that resolves to a publicly accessible IP address of the server. Setting Up an Nginx Container Reverse Proxying Yourself It's highly recommended that you use the production Nginx container, which automatically generates an SSL certificate for you and takes care of reverse proxying into Tomato for you. To do so, first make sure of the following in your .env file, CERTBOT_EMAIL is set to a valid email. DOMAIN_NAME and CERTBOT_EMAIL must be properly set! If you don't set DOMAIN_NAME and CERTBOT_EMAIL properly as described above, the production Nginx container will not start correctly. This is a requirement of Certbot , the underlying component that automatically generates an SSL certificate for you. Now, create a symbolic link for the Nginx overrides, ln -s docker-compose.nginx.yml docker-compose.overrides.yml Reverse proxying yourself is NOT recommended. This is method of setting up Tomato on your server is unsupported, and not recommended. However, here is a guide for non-standard setups, or if you don't have port 80 and 443 available on your server. Create and edit a file named docker-compose.overrides.yml , server/docker-compose.overrides.yml services : app : ports : # Replace 1234 with any port you like - 127.0.0.1:1234:8000 Then in your web server, reverse proxy into port you chose. If you're using Nginx , you can use configuration like this, sample.conf server { # ... other Nginx config here location /assets/ { # Replace /home/user/tomato with the path you cloned the repository alias /home/user/tomato/server/serve/assets/ ; } location /static/ { # Replace /home/user/tomato here too alias /home/user/tomato/server/serve/static/ ; } location / { proxy_set_header Host $http_host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Proto $scheme ; # Replace 1234 with the port you chose above proxy_pass http://127.0.0.1:1234 ; } } Pull the containers (or build them by instead executing docker compose build ), docker compose pull Create an admin user by following the instructions after typing this at the command line, docker compose run --rm app ./manage.py createsuperuser Now bring up the server, docker compose up -d Head over to https://<DOMAIN_NAME>/ in your web browser. To stop the server, docker compose down Tomato will be configured to auto-restart on crashes, and and system start-up.","title":"Installation"}]}