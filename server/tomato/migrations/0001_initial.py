# Generated by Django 4.1.1 on 2022-09-14 08:33

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this account is enabled. Unselect this instead of deleting an account."
                        ),
                        verbose_name="account enabled",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            "The groups this user belongs to. A user will get all permissions granted to each of their"
                            " groups."
                        ),
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Rotator",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="The name of this asset rotator, eg 'ADs', 'Station IDs, 'Short Interviews', etc.",
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
            ],
            options={
                "db_table": "rotators",
            },
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="created at")),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text=(
                            "Optional name, if left unspecified, base it off the audio file's metadata and failing that"
                            " its filename."
                        ),
                        max_length=100,
                        verbose_name="name",
                    ),
                ),
                ("file", models.FileField(null=True, upload_to="", verbose_name="audio file")),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[(0, "Pending processing"), (1, "Processing"), (2, "Processing Failed"), (3, "Ready")],
                        default=0,
                    ),
                ),
                (
                    "enabled",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this audio asset is enabled. Unselect this to completely disable"
                            " playing of this asset."
                        ),
                        verbose_name="enabled",
                    ),
                ),
                ("duration", models.DurationField(default=datetime.timedelta(0))),
                (
                    "created_by",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "rotators",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Rotators that this asset will be included in.",
                        related_name="assets",
                        to="tomato.rotator",
                        verbose_name="rotators",
                    ),
                ),
            ],
            options={
                "verbose_name": "audio asset",
                "db_table": "assets",
                "ordering": (django.db.models.functions.text.Lower("name"),),
            },
        ),
    ]
