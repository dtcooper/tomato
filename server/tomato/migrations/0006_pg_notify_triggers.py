# Generated by Django 4.2.7 on 2023-11-08 21:27

from django.db import migrations, models
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):
    dependencies = [
        ("tomato", "0005_asset_alternates_save_asset_files"),
    ]

    operations = [
        migrations.CreateModel(
            name="AssetRotatorsProxy",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("tomato.asset_rotators",),
        ),
        migrations.AddField(
            model_name="clientlogentry",
            name="ip_address",
            field=models.GenericIPAddressField(blank=True, null=True, verbose_name="IP address"),
        ),
        migrations.AlterField(
            model_name="asset",
            name="rotators",
            field=models.ManyToManyField(
                blank=True,
                db_table="asset_rotators",
                help_text="Rotators that this asset will be included in.",
                related_name="assets",
                to="tomato.rotator",
                verbose_name="rotators",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="asset",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'assets',\n                    'op', LOWER(TG_OP)\n               "
                        " )::text\n            );\n            RETURN NEW;\n        "
                    ),
                    hash="0c9fd999301fabc5256c81f8b758bb2b3690de3b",
                    level="STATEMENT",
                    operation="INSERT OR DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_e57a6",
                    table="assets",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="assetalternate",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'asset_alternates',\n                    'op', LOWER(TG_OP)\n     "
                        "           )::text\n            );\n            RETURN NEW;\n        "
                    ),
                    hash="ea682bd1104b10235738ed88bca3424561e0fbf6",
                    level="STATEMENT",
                    operation="INSERT OR DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_518fc",
                    table="asset_alternates",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="rotator",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'rotators',\n                    'op', LOWER(TG_OP)\n             "
                        "   )::text\n            );\n            RETURN NEW;\n        "
                    ),
                    hash="09db8966f559dd506485f6bafdddfc7d8e761f69",
                    level="STATEMENT",
                    operation="INSERT OR DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_ea226",
                    table="rotators",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="stopset",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'stopsets',\n                    'op', LOWER(TG_OP)\n             "
                        "   )::text\n            );\n            RETURN NEW;\n        "
                    ),
                    hash="222beff728445595aa0ad5da35b09f828cb5b0a7",
                    level="STATEMENT",
                    operation="INSERT OR DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_82ed4",
                    table="stopsets",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="stopsetrotator",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'stopset_rotators',\n                    'op', LOWER(TG_OP)\n     "
                        "           )::text\n            );\n            RETURN NEW;\n        "
                    ),
                    hash="c6dcde0d0050fd1b2734c37a48d03a085beb3642",
                    level="STATEMENT",
                    operation="INSERT OR DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_4ea8a",
                    table="stopset_rotators",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="user",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'users',\n                    'op', LOWER(TG_OP),\n       "
                        " 'user_id', COALESCE(NEW.id, OLD.id),\n        'password_change', NEW.password !="
                        " OLD.password\n    \n                )::text\n            );\n            RETURN NEW;\n   "
                        "     "
                    ),
                    hash="5ec79f65f653ee3a240502e74490c0aa3134d5ee",
                    operation="DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_179e2",
                    table="users",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="assetrotatorsproxy",
            trigger=pgtrigger.compiler.Trigger(
                name="tomato_db_notify",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func=(
                        "\n            perform pg_notify('tomato_model_changes',\n                json_build_object(\n "
                        "                   'table', 'asset_rotators',\n                    'op', LOWER(TG_OP)\n       "
                        "         )::text\n            );\n            RETURN NEW;\n        "
                    ),
                    hash="2bef9b7a50fa9fde5fe3864f8e27e1acec028efb",
                    level="STATEMENT",
                    operation="INSERT OR DELETE OR UPDATE",
                    pgid="pgtrigger_tomato_db_notify_b7343",
                    table="asset_rotators",
                    when="AFTER",
                ),
            ),
        ),
    ]
